// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	ReviewMobile(ctx context.Context, opts ...grpc.CallOption) (ReviewService_ReviewMobileClient, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) ReviewMobile(ctx context.Context, opts ...grpc.CallOption) (ReviewService_ReviewMobileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReviewService_ServiceDesc.Streams[0], "/pb.ReviewService/ReviewMobile", opts...)
	if err != nil {
		return nil, err
	}
	x := &reviewServiceReviewMobileClient{stream}
	return x, nil
}

type ReviewService_ReviewMobileClient interface {
	Send(*RateMobileRequest) error
	Recv() (*RateMobileResponse, error)
	grpc.ClientStream
}

type reviewServiceReviewMobileClient struct {
	grpc.ClientStream
}

func (x *reviewServiceReviewMobileClient) Send(m *RateMobileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reviewServiceReviewMobileClient) Recv() (*RateMobileResponse, error) {
	m := new(RateMobileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility
type ReviewServiceServer interface {
	ReviewMobile(ReviewService_ReviewMobileServer) error
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (UnimplementedReviewServiceServer) ReviewMobile(ReviewService_ReviewMobileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReviewMobile not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_ReviewMobile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReviewServiceServer).ReviewMobile(&reviewServiceReviewMobileServer{stream})
}

type ReviewService_ReviewMobileServer interface {
	Send(*RateMobileResponse) error
	Recv() (*RateMobileRequest, error)
	grpc.ServerStream
}

type reviewServiceReviewMobileServer struct {
	grpc.ServerStream
}

func (x *reviewServiceReviewMobileServer) Send(m *RateMobileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reviewServiceReviewMobileServer) Recv() (*RateMobileRequest, error) {
	m := new(RateMobileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReviewMobile",
			Handler:       _ReviewService_ReviewMobile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "review_service.proto",
}
